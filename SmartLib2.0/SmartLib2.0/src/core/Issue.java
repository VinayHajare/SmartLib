package core;

import java.awt.HeadlessException;
import java.sql.*;
import java.text.*;
import java.util.Date;
import java.util.Calendar;
import javax.swing.*;
import util.InputValidator;
import util.LoggerUtil;
import util.Settings;

/**
 *
 * @author Hydron
 */
public class Issue extends javax.swing.JFrame {

    /**
     * Creates new form Issue
     */
    public Issue() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        bkid = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        bkname = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        borid = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        borname = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        borcontact = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Bookman Old Style", 1, 20)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Book ID");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(197, 50, -1, -1));

        bkid.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        bkid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bkidActionPerformed(evt);
            }
        });
        bkid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                bkidKeyTyped(evt);
            }
        });
        jPanel1.add(bkid, new org.netbeans.lib.awtextra.AbsoluteConstraints(389, 46, 210, 33));

        jLabel2.setFont(new java.awt.Font("Bookman Old Style", 1, 20)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Book Name");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(197, 129, -1, -1));

        bkname.setEditable(false);
        bkname.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        jPanel1.add(bkname, new org.netbeans.lib.awtextra.AbsoluteConstraints(389, 125, 210, 33));

        jLabel3.setFont(new java.awt.Font("Bookman Old Style", 1, 20)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Borrower ID");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(197, 208, -1, -1));

        borid.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        borid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boridActionPerformed(evt);
            }
        });
        borid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                boridKeyTyped(evt);
            }
        });
        jPanel1.add(borid, new org.netbeans.lib.awtextra.AbsoluteConstraints(389, 204, 210, 33));

        jLabel4.setFont(new java.awt.Font("Bookman Old Style", 1, 20)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Borrower Name");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(197, 287, -1, -1));

        borname.setEditable(false);
        borname.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        jPanel1.add(borname, new org.netbeans.lib.awtextra.AbsoluteConstraints(389, 283, 210, 33));

        jLabel5.setFont(new java.awt.Font("Bookman Old Style", 1, 20)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Borrower Contact");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(197, 358, -1, 30));

        borcontact.setEditable(false);
        borcontact.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        jPanel1.add(borcontact, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 360, 210, 33));

        jButton2.setFont(new java.awt.Font("Century Schoolbook", 1, 18)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/close-btn.png"))); // NOI18N
        jButton2.setText("Close");
        jButton2.setBorder(null);
        jButton2.setBorderPainted(false);
        jButton2.setContentAreaFilled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 430, 133, -1));

        jButton1.setFont(new java.awt.Font("Century Schoolbook", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/app-icon.png"))); // NOI18N
        jButton1.setText("Issue Book");
        jButton1.setBorder(null);
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 430, -1, -1));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/issue-bg.jpeg"))); // NOI18N
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -4, 750, 560));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       //close button action on  click
       this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Issue button action
        // format of date
        final String DATE_FORMAT = "yyyy-MM-dd";
        // Manipulating the Issued_Books table
        final String SQL_INSERT = "INSERT INTO issued_books(BK_ID,BK_NAME,BOR_ID,BOR_NAME,BOR_CONTACT,ISS_DATE,RET_DATE) values(?, ?, ?, ?, ?, ?, ?)";
        // Updating the Books table
        final String SQL_UPDATE = "UPDATE books SET BK_QTY = BK_QTY - 1 where BK_ID=?";
        // Fetch the Book Quantity from books
        final String SQL_FETCH = "SELECT BK_QTY FROM books WHERE BK_ID = ?";

        String ISS_DATE = null;
        String RET_DATE = null;

        Connection con = null;
        PreparedStatement psInsert = null;
        PreparedStatement psUpdate = null;
        PreparedStatement psFetch = null;
        ResultSet rs = null;

        if (bkid.getText().equals("") || bkname.getText().equals("") || borid.getText().equals("") || borname.getText().equals("") || borcontact.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please fill all fields !!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                // extracting the entered data by user
                String BKID = bkid.getText();
                String BKNAME = bkname.getText();
                String BORID = borid.getText();
                String BORNAME = borname.getText();
                String BORCONTACT = borcontact.getText();
                String QTY = "";

                // DateFormatter object
                DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT);

                // current date
                Date currentDate = new Date();
                ISS_DATE = dateFormat.format(currentDate);

                // adding 7 days to current date using calendar class
                Calendar c = Calendar.getInstance();
                c.setTime(currentDate);
                c.add(Calendar.DATE, Settings.getBorrowingDays());
                RET_DATE = dateFormat.format(c.getTime());

                // Establish the connection and create statement to execute the query
                con = Connect.dbconnection();
                psInsert = con.prepareStatement(SQL_INSERT);
                psUpdate = con.prepareStatement(SQL_UPDATE);
                psFetch = con.prepareStatement(SQL_FETCH);

                // Fetch the book quantity from books before issuing the book
                psFetch.setString(1, BKID);
                rs = psFetch.executeQuery();

                if (rs.next()) {
                    QTY = rs.getString("BK_QTY");
                }

                if (QTY.equals("0")) {
                    JOptionPane.showMessageDialog(this, "Book is out of stock !!", "OUT OF STOCK", JOptionPane.WARNING_MESSAGE);
                    // clearing text fields
                    bkid.setText("");
                    bkname.setText("");
                    borid.setText("");
                    borname.setText("");
                    borcontact.setText("");
                } else {
                    // setting data in insert SQL query
                    psInsert.setString(1, BKID);
                    psInsert.setString(2, BKNAME);
                    psInsert.setString(3, BORID);
                    psInsert.setString(4, BORNAME);
                    psInsert.setString(5, BORCONTACT);
                    psInsert.setString(6, ISS_DATE);
                    psInsert.setString(7, RET_DATE);

                    // setting data in update SQL query
                    psUpdate.setString(1, BKID);

                    // executing both statements
                    psInsert.executeUpdate();
                    psUpdate.executeUpdate();

                    // showing success message
                    JOptionPane.showMessageDialog(this, "Book issued Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                    // clearing the text fields
                    bkid.setText("");
                    bkname.setText("");
                    borid.setText("");
                    borname.setText("");
                    borcontact.setText("");
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(rootPane, "Database Operation Failed !!!", "Database ERROR", JOptionPane.ERROR_MESSAGE);
                LoggerUtil.logError("Database operation Failed", ex);
            } catch (ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(rootPane, "Database driver not found!!!", "Database Driver ERROR", JOptionPane.ERROR_MESSAGE);
                LoggerUtil.logError("Database driver not found", ex);
            } catch (HeadlessException ex) {
                LoggerUtil.logError("Display system not available", ex);
            } finally {
                try {
                    if (rs != null) {
                        rs.close();
                    }
                    if (psInsert != null) {
                        psInsert.close();
                    }
                    if (psUpdate != null) {
                        psUpdate.close();
                    }
                    if (psFetch != null) {
                        psFetch.close();
                    }
                    if (con != null) {
                        con.close();
                    }
                } catch (SQLException e) {
                    LoggerUtil.logError("Failed to close database resources", e);
                }
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void bkidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bkidActionPerformed
        //fetching the book name on enter
        final String BKID = bkid.getText();
        final String SQL = "SELECT BK_NAME FROM BOOKS WHERE BK_ID = ?";
        Connection con = null;
        PreparedStatement ps = null;
        
        try{
            con = Connect.dbconnection();
            ps = con.prepareStatement(SQL);
            ps.setString(1, BKID);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                bkname.setText(rs.getString("BK_NAME"));
            }else{
                // Displaying error message if book ID is not found
                JOptionPane.showMessageDialog(rootPane, "Book ID doesn`t exist !!!", "Key ERROR", JOptionPane.ERROR_MESSAGE);
                // Clearing the text fields if book ID is not found
                bkid.setText("");
                bkname.setText("");
            }
        }catch (SQLException ex) {
              JOptionPane.showMessageDialog(rootPane, "Database Operation Failed !!!", "Database ERROR", JOptionPane.ERROR_MESSAGE);

        } catch (ClassNotFoundException ex) {
              JOptionPane.showMessageDialog(rootPane, "Database driver not found!!!", "Database Driver ERROR", JOptionPane.ERROR_MESSAGE);
              LoggerUtil.logError("Database driver not found", ex);
        }finally {
                try {
                    if (ps != null) {
                        ps.close();
                    }
                    if (con != null) {
                        con.close();
                    }
                } catch (SQLException e) {
                    LoggerUtil.logError("Failed to close database resources", e);
                }
        }
    }//GEN-LAST:event_bkidActionPerformed

    private void boridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boridActionPerformed
        //fetching borrower details on the enter 
        final String BORID = borid.getText();
        final String SQL = "SELECT * FROM BORROWERS WHERE BOR_ID = ?";
        Connection con = null;
        PreparedStatement ps = null;
        
        try{
            con = Connect.dbconnection();
            ps = con.prepareStatement(SQL);
            ps.setString(1, BORID);
            ResultSet rs = ps.executeQuery();
            if(rs.next()){
                borcontact.setText(rs.getString("BOR_CONTACT"));
                borname.setText(rs.getString("BOR_NAME"));
            }else{
                // Displaying error message if book ID is not found
                JOptionPane.showMessageDialog(rootPane, "Borrower ID doesn`t exist !!!", "Key ERROR", JOptionPane.ERROR_MESSAGE);
                // Clearing the text fields if book ID is not found
                borid.setText("");
                borcontact.setText("");
                borname.setText("");
            }
        }catch (SQLException ex) {
              JOptionPane.showMessageDialog(rootPane, "Database Operation Failed !!!", "Database ERROR", JOptionPane.ERROR_MESSAGE);

        } catch (ClassNotFoundException ex) {
              JOptionPane.showMessageDialog(rootPane, "Database driver not found!!!", "Database Driver ERROR", JOptionPane.ERROR_MESSAGE);
              LoggerUtil.logError("Database driver not found", ex);
        }finally {
                try {
                    if (ps != null) {
                        ps.close();
                    }
                    if (con != null) {
                        con.close();
                    }
                } catch (SQLException e) {
                    LoggerUtil.logError("Failed to close database resources", e);
                }
        }
    }//GEN-LAST:event_boridActionPerformed

    private void bkidKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bkidKeyTyped
        // checking book id
        InputValidator.validateNumericInput(evt, rootPane, "Only number are allowed for Book ID !!!");
    }//GEN-LAST:event_bkidKeyTyped

    private void boridKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_boridKeyTyped
        // check borrower id
        InputValidator.validateNumericInput(evt, rootPane, "Only numbers are allowed for Borrower ID!!!");
    }//GEN-LAST:event_boridKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            LoggerUtil.logError("Nimbus Look and Feel class not found", ex);
        } catch (InstantiationException ex) {
            LoggerUtil.logError("Unable to instantiate the class ", ex);
        } catch (IllegalAccessException ex) {
            LoggerUtil.logError("Access denied", ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            LoggerUtil.logError("Look and feel not supported by the system", ex);
        }        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                Issue j1 = new Issue();
                ImageIcon img = new ImageIcon(getClass().getResource("/assets/issue-book-icon.png"));
                j1.setIconImage(img.getImage());
                j1.setTitle("Issue Book");
                j1.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField bkid;
    private javax.swing.JTextField bkname;
    private javax.swing.JTextField borcontact;
    private javax.swing.JTextField borid;
    private javax.swing.JTextField borname;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
