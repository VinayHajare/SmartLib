package core;

import java.awt.HeadlessException;
import java.sql.*;
import java.text.*;
import java.util.Date;
import java.util.Calendar;
import javax.swing.*;
import util.InputValidator;
import util.LoggerUtil;
import util.Settings;

/**
 *
 * @author Hydron
 */
public class Return extends javax.swing.JFrame {

    /**
     * Creates new form Return
     */
    public Return() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        bkid = new javax.swing.JTextField();
        borid = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial Black", 0, 16)); // NOI18N
        jLabel1.setText("Book ID");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 60, 80, 35));

        jLabel2.setFont(new java.awt.Font("Arial Black", 0, 16)); // NOI18N
        jLabel2.setText("Borrower ID");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 170, -1, -1));

        bkid.setFont(new java.awt.Font("Lucida Fax", 0, 18)); // NOI18N
        bkid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                bkidKeyTyped(evt);
            }
        });
        jPanel1.add(bkid, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 110, 180, 40));

        borid.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        borid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                boridKeyTyped(evt);
            }
        });
        jPanel1.add(borid, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 210, 180, 40));

        jButton1.setFont(new java.awt.Font("Century Schoolbook", 1, 18)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/update-btn.png"))); // NOI18N
        jButton1.setText("Return Book");
        jButton1.setBorder(null);
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 290, -1, -1));

        jButton2.setFont(new java.awt.Font("Century Schoolbook", 1, 18)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/close-btn.png"))); // NOI18N
        jButton2.setText("Close");
        jButton2.setBorder(null);
        jButton2.setBorderPainted(false);
        jButton2.setContentAreaFilled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 370, 133, -1));

        jButton3.setFont(new java.awt.Font("Century Schoolbook", 1, 18)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/renew-btn.png"))); // NOI18N
        jButton3.setText("Renew");
        jButton3.setBorder(null);
        jButton3.setBorderPainted(false);
        jButton3.setContentAreaFilled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 290, -1, -1));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/return-renew-bg.jpeg"))); // NOI18N
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 660, 480));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 661, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Return button action
        final String DATE_FORMAT = "yyyy-MM-dd";
        String RET_DATE = null;

        final String SQL_FETCH_RET_DATE = "SELECT RET_DATE FROM issued_books WHERE BK_ID = ? AND BOR_ID = ?";
        final String SQL_DELETE_ISSUED = "DELETE FROM issued_books WHERE BK_ID = ? AND BOR_ID = ?";
        final String SQL_UPDATE_BOOKS = "UPDATE books SET BK_QTY = BK_QTY + 1 WHERE BK_ID = ?";
        final String SQL_UPDATE_BORROWERS = "UPDATE borrowers SET BK_BORROWED = BK_BORROWED - 1 WHERE BOR_ID = ?";
        final String SQL_UPDATE_FINE = "UPDATE borrowers SET FINE_AMT = FINE_AMT + ? WHERE BOR_ID = ?";
        
        Connection con = null;
        PreparedStatement psFetch = null;
        PreparedStatement psDelete = null;
        PreparedStatement psUpdate = null;
        PreparedStatement psUpdateBorrower = null;
        PreparedStatement psUpdateFine = null;
        
        ResultSet rs = null;

        if (bkid.getText().equals("") || borid.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please fill all fields !!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                // Extracting the entered data by user
                String BKID = bkid.getText();
                String BORID = borid.getText();

                // Taking the current date
                Date currentDate = new Date();
                DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT);

                // Establishing the connection
                con = Connect.dbconnection();

                // Checking if book is issued or not and extracting the return date
                psFetch = con.prepareStatement(SQL_FETCH_RET_DATE);
                psFetch.setString(1, BKID);
                psFetch.setString(2, BORID);
                rs = psFetch.executeQuery();

                if (rs.next()) {
                    RET_DATE = rs.getString("RET_DATE");
                } else {
                    JOptionPane.showMessageDialog(this, "No such book issued to the borrower!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Parsing return date to required format
                Date returnDate = dateFormat.parse(RET_DATE);

                // Deleting the record from issued_books
                psDelete = con.prepareStatement(SQL_DELETE_ISSUED);
                psDelete.setString(1, BKID);
                psDelete.setString(2, BORID);

                // Incrementing the book quantity in books
                psUpdate = con.prepareStatement(SQL_UPDATE_BOOKS);
                psUpdate.setString(1, BKID);
                
                // Decrementing the Book borrowed quantity in borrowers
                psUpdateBorrower = con.prepareStatement(SQL_UPDATE_BORROWERS);
                psUpdateBorrower.setString(1, BORID);
                
                // Check if book returning is on time
                if (currentDate.after(returnDate)) {
                    // Showing fine message for returning book late
                    psUpdateFine = con.prepareStatement(SQL_UPDATE_FINE);
                    psUpdateFine.setString(1, String.valueOf(Settings.getInstance().getFineAmount()));
                    psUpdateFine.setString(2, BORID);
                    psUpdateFine.executeUpdate();
                    JOptionPane.showMessageDialog(this, "Late in Returning Book, Pay fine of RS "+Settings.getInstance().getFineAmount(), "Warning", JOptionPane.WARNING_MESSAGE);
                    
                    // Deleting record from issued_books and incrementing book quantity
                    psDelete.executeUpdate();
                    psUpdate.executeUpdate();
                    psUpdateBorrower.executeUpdate();
                    
                    // Showing returned successful message
                    JOptionPane.showMessageDialog(this, "Book Returned Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    psDelete.executeUpdate();
                    psUpdate.executeUpdate();
                    psUpdateBorrower.executeUpdate();
                    // Showing returned successful message
                    JOptionPane.showMessageDialog(this, "Book Returned Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                }

                // Clearing text fields
                bkid.setText("");
                borid.setText("");

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Database Operation Failed !!!", "Database ERROR", JOptionPane.ERROR_MESSAGE);
                LoggerUtil.logError("Database operation Failed", ex);
            } catch (ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "Database driver not found!!!", "Database Driver ERROR", JOptionPane.ERROR_MESSAGE);
                LoggerUtil.logError("Database driver not found", ex);
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(this, "Date parsing failed!!!", "Parse ERROR", JOptionPane.ERROR_MESSAGE);
                LoggerUtil.logError("Date parsing failed", ex);
            } catch (HeadlessException ex) {
                LoggerUtil.logError("Display system not available", ex);
            } finally {
                try {
                    if (rs != null) {
                        rs.close();
                    }
                    if (psFetch != null) {
                        psFetch.close();
                    }
                    if (psDelete != null) {
                        psDelete.close();
                    }
                    if (psUpdate != null) {
                        psUpdate.close();
                    }
                    if (con != null) {
                        con.close();
                    }
                } catch (SQLException e) {
                    LoggerUtil.logError("Failed to close database resources", e);
                }
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //close button action on  click
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // Renew button action
        final String DATE_FORMAT = "yyyy-MM-dd";
        final String SQL_UPDATE_RET_DATE = "UPDATE issued_books SET RET_DATE = ? WHERE BK_ID = ? AND BOR_ID = ?";
        
        Connection con = null;
        PreparedStatement psUpdate = null;
        
        if (bkid.getText().equals("") || borid.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please fill all fields !!", "Error", JOptionPane.WARNING_MESSAGE);
        } else {
            String BKID = bkid.getText();
            String BORID = borid.getText();

            try {
                // Establishing the connection
                con = Connect.dbconnection();

                // Taking the current date
                DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT);
                Date currentDate = new Date();

                // Adding 7 days to current date using Calendar class
                Calendar c = Calendar.getInstance();
                c.setTime(currentDate);
                c.add(Calendar.DATE, Settings.getInstance().getBorrowingDays());
                String ret_date = dateFormat.format(c.getTime());

                // Query to update return date
                psUpdate = con.prepareStatement(SQL_UPDATE_RET_DATE);
                psUpdate.setString(1, ret_date);
                psUpdate.setString(2, BKID);
                psUpdate.setString(3, BORID);

                // Executing the update statement
                int rowsAffected = psUpdate.executeUpdate();
                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "Book Renewed Successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    bkid.setText("");
                    borid.setText("");
                } else {
                    JOptionPane.showMessageDialog(this, "No matching records found!", "Error", JOptionPane.ERROR_MESSAGE);
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Database Operation Failed !!!", "Database ERROR", JOptionPane.ERROR_MESSAGE);
                LoggerUtil.logError("Database operation Failed", ex);
            } catch (ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "Database driver not found!!!", "Database Driver ERROR", JOptionPane.ERROR_MESSAGE);
                LoggerUtil.logError("Database driver not found", ex);
            } catch (HeadlessException ex) {
                LoggerUtil.logError("Display system not available", ex);
            } finally {
                try {
                    if (psUpdate != null) {
                        psUpdate.close();
                    }
                    if (con != null) {
                        con.close();
                    }
                } catch (SQLException e) {
                    LoggerUtil.logError("Failed to close database resources", e);
                }
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void bkidKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bkidKeyTyped
        // check the book id
        InputValidator.validateNumericInput(evt, rootPane, "Only numbers are allowed for Book ID !!!");
    }//GEN-LAST:event_bkidKeyTyped

    private void boridKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_boridKeyTyped
        // check the borrower id
        InputValidator.validateNumericInput(evt, rootPane, "Only numbers are allowed for Borrower ID !!!");
    }//GEN-LAST:event_boridKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            LoggerUtil.logError("Nimbus Look and Feel class not found", ex);
        } catch (InstantiationException ex) {
            LoggerUtil.logError("Unable to instantiate the class ", ex);
        } catch (IllegalAccessException ex) {
            LoggerUtil.logError("Access denied", ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            LoggerUtil.logError("Look and feel not supported by the system", ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                Return j1 = new Return();
                ImageIcon img = new ImageIcon(getClass().getResource("/assets/return-book-icon.png"));
                j1.setIconImage(img.getImage());
                j1.setTitle("Return Book");
                j1.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField bkid;
    private javax.swing.JTextField borid;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
